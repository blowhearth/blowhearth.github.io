{"version":3,"sources":["logo.svg","lib/dataManager.js","DataList.js","Manager.js","PrivateKey.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StellarSdk","require","atob","server","Server","dataManager","build","privateKey","source","Keypair","fromSecret","publicKey","setData","_x","_setData","apply","this","arguments","Object","asyncToGenerator","regenerator_default","a","mark","_callee","data","_ref","sequence","account","transaction","response","wrap","_context","prev","next","console","log","accounts","accountId","call","sent","Account","TransactionBuilder","fee","BASE_FEE","addOperation","Operation","manageData","setTimeout","sign","secret","submitTransaction","abrupt","t0","stop","_persistBearer","_callee2","txid","coordinates","lastDataEntry","value","succeded","_context2","getlastDataEntry","name","JSON","stringify","index","debug","_persistTxBearer","_callee3","_context3","_getlastDataEntry","_callee4","acc","accountData","parsedData","_i","_Object$keys","key","parsed","_context4","loadAccount","data_attr","keys","length","parse","push","e","sort","b","pop","_deleteDataEntry","_callee5","_context5","_getAllData","_callee6","_i2","_Object$keys2","_context6","Network","useTestNetwork","persistBearer","_x2","_x3","getAllData","persistTxBearer","_x4","_x5","_x6","deleteDataEntry","_x7","DataList","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","fields","fieldName","setState","assign","defineProperty","_this2","_this$props","_this$props$data","addTX","react_default","createElement","style","fontSize","map","d","i","className","href","target","type","placeholder","onChange","saveField","onClick","React","Component","Manager","loading","DM","DataManager","then","_this3","_this$state","_this$state$data","src_DataList","PrivateKey","setPK","_this$state$pk","pk","StrKey","stellar","App","_React$Component","inherits","createClass","isValidEd25519SecretSeed","_this$state$privateKe","src_Manager","PrivateKey_PrivateKey","setPrivateKey","bind","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c177ed8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const StellarSdk = require(\"stellar-sdk\");\nconst atob = require(\"atob\");\nconst server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n\nfunction build(privateKey) {\n  const source = StellarSdk.Keypair.fromSecret(privateKey);\n  const publicKey = source.publicKey();\n\n  StellarSdk.Network.useTestNetwork();\n\n  async function setData(data) {\n    console.log(\"Adding new data to the database,\", data);\n    try {\n      const { sequence } = await server\n        .accounts()\n        .accountId(source.publicKey())\n        .call();\n      const account = new StellarSdk.Account(source.publicKey(), sequence);\n      const transaction = new StellarSdk.TransactionBuilder(account, {\n        fee: StellarSdk.BASE_FEE\n      })\n        .addOperation(StellarSdk.Operation.manageData(data))\n        .setTimeout(1000)\n        .build();\n      transaction.sign(StellarSdk.Keypair.fromSecret(source.secret()));\n      const response = await server.submitTransaction(transaction);\n      console.log(response);\n\n      return true;\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  }\n\n  async function persistBearer(txid, coordinates) {\n    try {\n      const lastDataEntry = await getlastDataEntry();\n      const value = lastDataEntry.value;\n      const data = {\n        name: txid,\n        value: JSON.stringify({\n          index: value.index + 1,\n          coordinates\n        })\n      };\n      const succeded = await setData(data);\n      return succeded;\n    } catch (e) {\n      console.debug(e);\n    }\n  }\n  async function persistTxBearer(index, txid, coordinates) {\n    try {\n      const data = {\n        name: txid,\n        value: JSON.stringify({\n          index: index,\n          coordinates\n        })\n      };\n      const succeded = await setData(data);\n      return succeded;\n    } catch (e) {\n      console.debug(e);\n    }\n  }\n\n  async function getlastDataEntry() {\n    const acc = await server.loadAccount(source.publicKey());\n\n    const accountData = acc.data_attr;\n    const parsedData = [];\n    for (let key of Object.keys(accountData)) {\n      try {\n        const value = JSON.parse(atob(accountData[key]));\n        const parsed = {\n          name: key,\n          value\n        };\n        parsedData.push(parsed);\n      } catch (e) {\n        console.debug(e);\n      }\n    }\n\n    return parsedData.sort((a, b) => a.value.index - b.value.index).pop();\n  }\n  async function deleteDataEntry(txid) {\n    try {\n      const data = {\n        name: txid,\n        value: null\n      };\n      const succeded = await setData(data);\n      return succeded;\n    } catch (e) {\n      console.debug(e);\n    }\n  }\n\n  async function getAllData() {\n    try {\n      const acc = await server.loadAccount(source.publicKey());\n      const accountData = acc.data_attr;\n      const parsedData = [];\n      for (let key of Object.keys(accountData)) {\n        try {\n          const value = JSON.parse(atob(accountData[key]));\n          const parsed = {\n            name: key,\n            value\n          };\n          parsedData.push(parsed);\n        } catch (e) {\n          console.debug(e);\n        }\n      }\n      return parsedData.sort((a, b) => a.value.index - b.value.index);\n    } catch (e) {\n      console.debug(e);\n      return [];\n    }\n  }\n\n  return {\n    persistBearer,\n    getlastDataEntry,\n    publicKey,\n    getAllData,\n    persistTxBearer,\n    deleteDataEntry\n  };\n}\n\nexport default { build };\n","import React from \"react\";\nimport DataManager from \"./lib/dataManager\";\n\nclass DataList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      fields: { index: \"\", txid: \"\", coordinates: \"\" }\n    };\n  }\n\n  saveField(fieldName, value) {\n    const { fields } = this.state;\n\n    this.setState({\n      fields: Object.assign({}, fields, { [fieldName]: value })\n    });\n  }\n\n  render() {\n    const { data = [], addTX } = this.props;\n    const { fields } = this.state;\n    return (\n      <div>\n        <table>\n          <thead>\n            <tr>\n              <th> TXID</th>\n              <th> Coordinates</th>\n              <th> Index</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.length === 0 && noElementsFound()}\n            {data.map((d, i) => (\n              <tr className=\"dataRow\" key={i}>\n                <td>\n                  {\" \"}\n                  <a\n                    className={\"coolLink\"}\n                    href={\"https://stellar.expert/explorer/public/tx/\" + d.name}\n                    target=\"blank\"\n                  >\n                    {d.name}{\" \"}\n                  </a>\n                </td>\n                <td>{JSON.stringify(d.value.coordinates)}</td>\n                <td>{d.value.index}</td>\n              </tr>\n            ))}\n            <tr className=\"dataRow\">\n              <td>\n                <input\n                  className={\"coolInput\"}\n                  type=\"text\"\n                  placeholder=\"TXID\"\n                  onChange={e => this.saveField(\"txid\", e.target.value)}\n                />\n              </td>\n              <td>\n                <input\n                  className={\"coolInput\"}\n                  type=\"text\"\n                  placeholder=\"coordinates\"\n                  onChange={e => this.saveField(\"coordinates\", e.target.value)}\n                />\n              </td>\n              <td>\n                <input\n                  className={\"coolInput\"}\n                  type=\"text\"\n                  placeholder=\"index\"\n                  onChange={e => this.saveField(\"index\", e.target.value)}\n                />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <button className={\"coolButton\"} onClick={() => addTX(fields)}>\n          ADD\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default DataList;\n\nfunction noElementsFound() {\n  return (\n    <tr style={{ fontSize: 15 }}>\n      <td />\n      <td>No elements found</td>\n      <td />\n    </tr>\n  );\n}\n","import React from \"react\";\nimport DataManager from \"./lib/dataManager\";\nimport DataList from \"./DataList\";\n\nclass Manager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      loading: false\n    };\n  }\n  componentDidMount() {}\n  componentDidMount() {\n    const { privateKey } = this.props;\n    this.DM = DataManager.build(privateKey);\n    this.setData();\n  }\n\n  async setData() {\n    const { privateKey } = this.props;\n\n    const data = await this.DM.getAllData();\n    return this.setState({ data });\n  }\n\n  async addTX({ txid, index, coordinates }) {\n    console.log(\"Adding tx\", txid, coordinates);\n    this.setState({ loading: true });\n    if (index === \"\" && coordinates === \"\") {\n      const response = await this.DM.deleteDataEntry(txid);\n    } else {\n      const response = await this.DM.persistTxBearer(\n        index,\n        txid,\n        JSON.parse(coordinates)\n      );\n      console.log(response);\n    }\n    this.setData().then(() => this.setState({ loading: false }));\n  }\n\n  render() {\n    const { data = false, loading } = this.state;\n    return data ? (\n      <div>\n        <DataList data={data} addTX={fields => this.addTX(fields)} />\n        {loading && <div>Procesing transaction</div>}\n      </div>\n    ) : (\n      <div>Connecting to the Stellar Network</div>\n    );\n  }\n}\n\nexport default Manager;\n","import React from \"react\";\n\nexport default class PrivateKey extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    const { setPK } = this.props;\n    const { pk = null } = this.state;\n    return (\n      <div>\n        <input\n          type=\"text\"\n          onChange={e => this.setState({ pk: e.target.value })}\n        />\n        <button onClick={() => setPK(pk)}> login </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Manager from \"./Manager\";\nimport PrivateKey from \"./PrivateKey\";\nimport stellar from \"stellar-sdk\";\n\nvar StrKey = stellar.StrKey;\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  setPrivateKey(privateKey) {\n    console.log(\"Checking PK\");\n    if (StrKey.isValidEd25519SecretSeed(privateKey)) {\n      console.log(\"Check Pass\");\n      return this.setState({ privateKey });\n    }\n\n    console.log(\"WrongPK\");\n  }\n  render() {\n    const { privateKey = null } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {privateKey ? (\n            <Manager privateKey={privateKey} />\n          ) : (\n            <PrivateKey setPK={this.setPrivateKey.bind(this)} />\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}